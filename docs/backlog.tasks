IMPLEMENTED

	Features:

		✔ Providers load raw bovespa historical series data @done (13-04-27 14:55)
		✔ Providers are able to calculate data for given date interval @done (13-04-27 14:55)

	Refactorings:

		✔ Loads bovespa's historical series data @done (13-04-27 14:55)

	Functional:

		✔ Uses pandas lib @done (13-04-27 14:55)


--- ✄ -----------------------

SHORT TERM BACKLOG

Finish current tests:

 ✔ Test existing byproduct providers using fake data @done (13-04-27 18:26)

Create an MACD provider factory:

 ✔ Create an MACD provider prototype @done (13-04-27 20:06)
 ✔ Create an single MACD provider @done (13-04-29 13:43)
 ✔ Test the created MACD provider @done (13-04-29 21:24)

Create Point:

 ✔ Prototype a point @done (13-04-29 23:23)
 ☐ Create Abstract class
 ☐ Create point evaluation through generator
 ☐ Create example point using MACD HISTOGRAM POSITIVE CROSS
 ☐ Create example point using MACD HISTOGRAM NEGATIVE CROSS
 ☐ Test evaluation
 ☐ Test example points

Create Strategy:

	Create prototypes for approaches:
	☐ Approach to receive data at once
	☐ Aprroach to receive a rolling window, using object to command operations
	☐ Aprroach to receive one data time at a time, using object to command operations

 ☐ Create Abstract class
 ☐ Create strategy evaluation through generator
 ☐ Create example startegy using MACD example points
 ☐ Test evaluation
 ☐ Test example strategy

Refactor everything to use only datetime:

 ☐ Change bovespaParser to create datetime objects
 ☐ Change everything that uses date objects to use datetime
 ☐ Change utilitariam methods at dateutils
 ☐ Avaliate creating utilitariam method that checks the use of date and makes conversions to datetime if needed

Improve prodiver tests:

 ☐ Create raw fake data for provider testes
 ☐ Create test generator to test each provider for returning correct requested date range
 ☐ Create test generator to test each provider for returning correct requested datetime range
 ☐ Create test for provider chain manager for returning correct requested date and datetime range

Create Strategy statistics:

 ☐ Accumulated return rate 			for periods [5, 15, 30, 60, 90, 180, 360, 720]
 ☐ Average strategy duration			for periods [5, 15, 30, 60, 90, 180, 360, 720]
 ☐ ?? Mean strategy duration			for periods [5, 15, 30, 60, 90, 180, 360, 720]
 ☐ ?? Different Strategy trustability score (accumulated return rate / average duration - ocilates too much? )
 ☐ ?? [Different] Strategy score - taking into account accumulated return rates, trustability and average duration

Create Point statistics:

 ☐ Chance 	for return rate [-15..15]	for durations []

Adapt provider memory cache:

 ☐ Test merging and updateing data into providers
 ☐ Test data splicing when consulting cached data
 ☐ Test provider memory cache

Create provider decorator/metaclass:

 ☐ Add logs to providers
 ☐ Set provider reference (substitute typifyes)
 ☐ Specify provider dependencies
	 ☐ Capture dependencies specification
	 ☐ Inject locator dependencies
	 ☐ ?? Detect ciclical dependencies, log them, ignore provider
 ☐ ?? Use decorator to register to locator 

Create tags and tag selector:

 ☐ ??

Create function to detect data errors:

 ☐ Measurement by measurement, looking out for 20% + changes
 ☐ Verify if weard changes are pontual
 ☐ Verify if potential errors are infact splits
 ☐ Log pontential errors

Clean up data when new splits are found:

 ☐ Create update method into providers

--- ✄ -----------------------

DOCUMENTATION AND STYLE

Document every function, class and methods:

 ☐ Logic
 ☐ Usage
 ☐ big-O complexity

Create documentation and its makefiles (for linux and win) using sphinx (inspired by https://github.com/quantopian/zipline):

 ☐ Create simple example documentation
 ☐ Create makefile for windows
 ☐ Create makefile for linux
 ☐ Update gitignore to ignore built files
 ☐ Improve documentation (take a look at zipline)

Verify Style:

 ☐ Add suport to PEP8 style testing (found at https://github.com/jcrocholl/pep8/ also used by zipline)

--- ✄ -----------------------

LONG TERM FEATURES / IDEAS




--- ✄ -----------------------

REFACTORINGS

Separate each provider in its own file module:
 ☐ Separate each provider in its own file module
 ☐ Import all modules from a specific folder automatically (maybe use providers as plugins)
